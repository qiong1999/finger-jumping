[{"D:\\finger-jumping\\src\\index.tsx":"1","D:\\finger-jumping\\src\\reportWebVitals.ts":"2","D:\\finger-jumping\\src\\App.tsx":"3","D:\\finger-jumping\\src\\components\\piano\\piano.tsx":"4","D:\\finger-jumping\\src\\components\\piano\\pianoItem.tsx":"5","D:\\finger-jumping\\src\\components\\alert\\alert.tsx":"6","D:\\finger-jumping\\src\\page\\home\\home.tsx":"7","D:\\finger-jumping\\src\\piano_chords.js":"8"},{"size":528,"mtime":1611208157342,"results":"9","hashOfConfig":"10"},{"size":440,"mtime":1611024737799,"results":"11","hashOfConfig":"10"},{"size":339,"mtime":1614506148642,"results":"12","hashOfConfig":"10"},{"size":656,"mtime":1611026529353,"results":"13","hashOfConfig":"10"},{"size":2018,"mtime":1611323300088,"results":"14","hashOfConfig":"10"},{"size":2533,"mtime":1611323469799,"results":"15","hashOfConfig":"10"},{"size":12621,"mtime":1614506318325,"results":"16","hashOfConfig":"10"},{"size":2340455,"mtime":1611024737798,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1ylkgwh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"D:\\finger-jumping\\src\\index.tsx",[],["40","41"],"D:\\finger-jumping\\src\\reportWebVitals.ts",[],"D:\\finger-jumping\\src\\App.tsx",["42"],"D:\\finger-jumping\\src\\components\\piano\\piano.tsx",["43","44"],"import React, { FC } from 'react';\r\nimport styles from './piano.module.css';\r\nimport classNames from 'classnames';\r\n\r\nexport interface BasePianoProps {\r\n    defaultIndex?: number;\r\n    className?: string;\r\n    onSelect?: (selected: string) => void;\r\n    children?: React.ReactNode;\r\n}\r\n\r\ninterface IPianoContext {\r\n    onSelect?: (selected: string) => void;\r\n}\r\n\r\nexport const Piano: FC<BasePianoProps> = (props) => {\r\n    const { className, onSelect, children } = props;\r\n    const classes = classNames(styles.piano, styles[className === undefined ? '' : className]);\r\n\r\n    return <div className={classes}>{children}</div>;\r\n};\r\n\r\nexport default Piano;\r\n","D:\\finger-jumping\\src\\components\\piano\\pianoItem.tsx",["45","46","47","48","49"],"import React, { FC, useState } from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport styles from './pianoItem.module.css';\r\n\r\ntype keyValue = { id: string; value: string; checked: boolean; chord: string }[];\r\n\r\nexport interface PianoItemProps {\r\n    className?: string;\r\n    keyValue: keyValue;\r\n    children?: React.ReactNode;\r\n}\r\nexport const PianoItem: FC<PianoItemProps> = (props) => {\r\n    const { className, keyValue, children } = props;\r\n    const [pianoKeys, setKey] = useState(keyValue);\r\n\r\n    const classes = classNames(styles.pianoItem, styles[className === undefined ? '' : className]);\r\n\r\n    const wkList = pianoKeys.map((item, index) => {\r\n        if (index < 7) {\r\n            return (\r\n                <button id={item.id} key={item.id} className={`${styles.whiteKey} ${item.checked ? styles.wk : ''}`}>\r\n                    {item.value}-{item.chord}\r\n                    <audio></audio>\r\n                </button>\r\n            );\r\n        }\r\n    });\r\n    const bkListOne = pianoKeys.map((item, index) => {\r\n        if (index >= 7 && index < 9) {\r\n            return (\r\n                <button id={item.id} key={item.id} className={`${styles.blackKey} ${item.checked ? styles.bk : ''}`}>\r\n                    {item.value}-{item.chord}\r\n                    <audio></audio>\r\n                </button>\r\n            );\r\n        }\r\n    });\r\n    const bkListTwo = pianoKeys.map((item, index) => {\r\n        if (index >= 9) {\r\n            return (\r\n                <button id={item.id} key={item.id} className={`${styles.blackKey} ${item.checked ? styles.bk : ''}`}>\r\n                    {item.value}-{item.chord}\r\n                    <audio></audio>\r\n                </button>\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className={classes}>\r\n            <div>{wkList}</div>\r\n            <div className={styles.bkSet}>\r\n                <div>{bkListOne}</div>\r\n                <div>{bkListTwo}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PianoItem;\r\n","D:\\finger-jumping\\src\\components\\alert\\alert.tsx",["50","51"],"import React, { FC, useRef, useEffect, useState } from 'react';\r\nimport styles from './alert.module.css';\r\nimport classNames from 'classnames';\r\n\r\ninterface BaseAlertProps {\r\n    className?: string;\r\n    children?: React.ReactNode;\r\n    ownStyle?: React.CSSProperties;\r\n    handleClick?: Function;\r\n    submit?: Function;\r\n    message?: { chords: string[] };\r\n}\r\n\r\nexport const Alert: FC<BaseAlertProps> = (props) => {\r\n    const { className, children, ownStyle, handleClick, submit, message } = props;\r\n    const classes = classNames(styles.alt, styles[className === undefined ? '' : className]);\r\n    const chordSelect = useRef<HTMLSelectElement>(null);\r\n    const valueSelect = useRef<HTMLInputElement>(null);\r\n    const chord = useRef<string>('');\r\n    const value = useRef<string>('');\r\n    const optionLists = message?.chords.map((item) => {\r\n        return (\r\n            <option value={item} key={item}>\r\n                {item}\r\n            </option>\r\n        );\r\n    });\r\n    const handleSelect = () => {\r\n        console.log('执行了');\r\n        if (chordSelect.current && valueSelect.current) {\r\n            const selectedIndex = chordSelect.current.selectedIndex;\r\n            chord.current = chordSelect.current.options[selectedIndex].value;\r\n\r\n            value.current = valueSelect.current.value;\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        handleSelect();\r\n    }, []);\r\n    return (\r\n        <div className={styles.container} style={ownStyle}>\r\n            <div className={styles.subMenu}></div>\r\n            <div className={classes}>\r\n                <div\r\n                    className={styles.close}\r\n                    onClick={() => {\r\n                        handleClick?.('none');\r\n                    }}\r\n                ></div>\r\n                <div>自定义琴键</div>\r\n                <div>绑定按键</div>\r\n                <input ref={valueSelect} className={styles.inp} placeholder=\"输入选择键盘键\" />\r\n\r\n                <div>设定琴音</div>\r\n                <select ref={chordSelect} className={styles.select}>\r\n                    {optionLists}\r\n                </select>\r\n\r\n                <button\r\n                    className={styles.btn}\r\n                    onClick={() => {\r\n                        handleSelect();\r\n                        submit?.({ chord: chord.current, value: value.current });\r\n                    }}\r\n                >\r\n                    提交\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Alert;\r\n","D:\\finger-jumping\\src\\page\\home\\home.tsx",["52","53"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport * as Tone from 'tone';\r\nimport Piano from '../../components/piano/piano';\r\nimport PianoItem from '../../components/piano/pianoItem';\r\nimport Alert from '../../components/alert/alert';\r\nimport { chords } from '../../piano_chords';\r\n\r\nimport styles from './home.module.css';\r\n\r\nconst test = [\r\n    [\r\n        { id: '1113', value: 'A', checked: false, chord: 'C2' },\r\n        { id: '1114', value: 'B', checked: false, chord: 'D2' },\r\n        { id: '1115', value: 'C', checked: false, chord: 'E2' },\r\n        { id: '1116', value: 'D', checked: false, chord: 'F2' },\r\n        { id: '1117', value: 'E', checked: false, chord: 'G2' },\r\n        { id: '1118', value: 'F', checked: false, chord: 'A2' },\r\n        { id: '1119', value: 'G', checked: false, chord: 'B2' },\r\n        { id: '2111', value: 'H', checked: false, chord: 'Db1' },\r\n        { id: '2112', value: 'I', checked: false, chord: 'Eb2' },\r\n\r\n        { id: '2113', value: 'O', checked: false, chord: 'Gb2' },\r\n        { id: '2114', value: 'U', checked: false, chord: 'Ab2' },\r\n        { id: '2115', value: 'F', checked: false, chord: 'Bb2' },\r\n    ],\r\n    [\r\n        { id: '13', value: 'q', checked: false, chord: 'C3' },\r\n        { id: '14', value: 'w', checked: false, chord: 'D3' },\r\n        { id: '15', value: 'e', checked: false, chord: 'E3' },\r\n        { id: '16', value: 'r', checked: false, chord: 'F3' },\r\n        { id: '17', value: 't', checked: false, chord: 'G3' },\r\n        { id: '18', value: 'y', checked: false, chord: 'A3' },\r\n        { id: '19', value: 'u', checked: false, chord: 'B3' },\r\n        { id: '21', value: 'i', checked: false, chord: 'Db3' },\r\n        { id: '22', value: 'o', checked: false, chord: 'Eb3' },\r\n\r\n        { id: '23', value: 'p', checked: false, chord: 'Gb2' },\r\n        { id: '24', value: 'a', checked: false, chord: 'Ab3' },\r\n        { id: '25', value: 's', checked: false, chord: 'Bb3' },\r\n    ],\r\n    [\r\n        { id: '1', value: '1', checked: false, chord: 'C4' },\r\n        { id: '2', value: '2', checked: false, chord: 'D4' },\r\n        { id: '3', value: '3', checked: false, chord: 'E4' },\r\n        { id: '4', value: '4', checked: false, chord: 'F4' },\r\n        { id: '5', value: '5', checked: false, chord: 'G4' },\r\n        { id: '6', value: '6', checked: false, chord: 'A4' },\r\n        { id: '7', value: '7', checked: false, chord: 'B4' },\r\n\r\n        { id: '8', value: '8', checked: false, chord: 'Db4' },\r\n        { id: '9', value: '9', checked: false, chord: 'Eb4' },\r\n\r\n        { id: '10', value: '0', checked: false, chord: 'Gb4' },\r\n        { id: '11', value: 'n', checked: false, chord: 'Ab4' },\r\n        { id: '12', value: 'm', checked: false, chord: 'Bb4' },\r\n    ],\r\n    [\r\n        { id: '111', value: '@', checked: false, chord: 'C5' },\r\n        { id: '112', value: '#', checked: false, chord: 'D5' },\r\n        { id: '113', value: '$', checked: false, chord: 'E5' },\r\n        { id: '114', value: '%', checked: false, chord: 'F5' },\r\n        { id: '115', value: '^', checked: false, chord: 'G5' },\r\n        { id: '116', value: '&', checked: false, chord: 'A5' },\r\n        { id: '117', value: '*', checked: false, chord: 'B5' },\r\n\r\n        { id: '118', value: '(', checked: false, chord: 'Db5' },\r\n        { id: '119', value: ')', checked: false, chord: 'Eb5' },\r\n\r\n        { id: '1110', value: '_', checked: false, chord: 'Gb5' },\r\n        { id: '1111', value: '+', checked: false, chord: 'Ab5' },\r\n        { id: '1112', value: '?', checked: false, chord: 'Bb5' },\r\n    ],\r\n];\r\n//建立一个value到id 的map\r\nconst vtoi = test.flat(3).reduce((acc: Record<string, string>, cur) => {\r\n    acc[cur.value] = cur.id;\r\n    return acc;\r\n}, {});\r\n//console.log(vtoi);\r\n\r\n//声明画布移动的速度\r\nconst speed = 3;\r\nfunction Home() {\r\n    //存储钢琴信息\r\n    const [keyState, setKey] = useState(test);\r\n\r\n    //存储鼠标是否按下\r\n    const [downKeys, setDownKeys] = useState<string[]>([]);\r\n    //存储鼠标当前在哪个key上，由于鼠标一次只能有一个key，所以只需存一次\r\n    const [mouseDown, setMouseDown] = useState<boolean>(false);\r\n    const [altTop, setTop] = useState(0);\r\n    const [altLeft, setLeft] = useState(0);\r\n    const [display, setDisplay] = useState('none');\r\n    const Lists = keyState.map((item, index) => {\r\n        return <PianoItem keyValue={item} key={index}></PianoItem>;\r\n    });\r\n\r\n    //当按下一个key的时候，就把它加入到当前正处于按下状态的key数组\r\n    const handleKeyDown = (value: string) => {\r\n        setDownKeys([...new Set([...downKeys, value])]);\r\n    };\r\n    //当抬起一个key的时候，就把它移出数组\r\n    const handleKeyUp = (value: string) => {\r\n        setDownKeys([...downKeys.filter((key) => key !== value)]);\r\n    };\r\n    const realTimeChords = useRef<string[]>([]);\r\n    //创建ref 用于绑定canvas\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n    const drawChords = () => {\r\n        //把当前正处于按下状态的按键数组转换为案件对应的dom的clientRect的数组\r\n        //console.log(realTimeChords, 'realTimeChords');\r\n        const keyDoms = realTimeChords.current.map((value) => {\r\n            const id = vtoi[value];\r\n            const curDom = document.getElementById(id);\r\n            const rect = curDom?.getClientRects()[0];\r\n            //  console.log(rect);\r\n            return rect;\r\n        });\r\n        //console.log('执行了，', keyDoms);\r\n        if (canvasRef.current) {\r\n            const ctx: CanvasRenderingContext2D = canvasRef.current.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n            //把画过的内容向上移动{speed}px;\r\n            //先将当前画布图像存起来\r\n            let snapshot = ctx.getImageData(0, 0, window.innerWidth, window.innerHeight);\r\n            //清空当前画布\r\n            ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\r\n            //再把存起来的画像放回画布，再向上移动{speed}\r\n\r\n            const img = new Image();\r\n            img.onload = function () {\r\n                for (let dom of keyDoms) {\r\n                    if (dom) {\r\n                        ctx.beginPath();\r\n                        ctx.rect(dom?.left, dom.top - speed, dom?.width, 70);\r\n                        ctx.fillStyle = 'transparent';\r\n                        ctx.fill();\r\n                        ctx.closePath();\r\n                        ctx.drawImage(img, dom?.left, dom.top + 20, 21, 50);\r\n                    }\r\n                }\r\n            };\r\n            img.src = 'ic.png';\r\n            ctx.putImageData(snapshot, 10 * Math.random(), -speed);\r\n        }\r\n\r\n        requestAnimationFrame(drawChords);\r\n    };\r\n    const playKey = (musicKey: string) => {\r\n        if (musicKey) {\r\n            let curMusicChord = test.flat(3).find((item) => item.value === musicKey)?.chord;\r\n            //如果chord找到了\r\n            if (curMusicChord) {\r\n                //将audio的进度重置为\r\n                const synth = new Tone.Synth().toDestination();\r\n                const now = Tone.now();\r\n                synth.triggerAttackRelease(curMusicChord, '10n', now);\r\n            }\r\n        }\r\n    };\r\n    const changeKey = (e: { chord: string; value: string }) => {\r\n        let tempKeys = keyState.map((item) => {\r\n            item.map((itt) => {\r\n                if (itt.value === e.value) {\r\n                    itt.chord = e.chord;\r\n                    console.log(itt);\r\n                }\r\n                return itt;\r\n            });\r\n            return item;\r\n        });\r\n        setKey(tempKeys);\r\n    };\r\n    const hasKey = (key: string) => {\r\n        let temp = downKeys;\r\n        let flag = false;\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === key) {\r\n                flag = true;\r\n            }\r\n        }\r\n        return flag;\r\n    };\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            canvasRef.current.width = window.innerWidth;\r\n            canvasRef.current.height = window.innerHeight;\r\n        }\r\n        window.addEventListener('resize', () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n            }\r\n        });\r\n        document.addEventListener('contextmenu', (e) => {\r\n            e.preventDefault();\r\n            const clickX = e.clientX;\r\n            const clickY = e.clientY;\r\n            const screenW = window.innerWidth;\r\n            const screenH = window.innerHeight;\r\n            const rootW = 228;\r\n            const rootH = 159;\r\n            const right = screenW - clickX > rootW;\r\n            const bottom = screenH - clickY > rootH;\r\n            if (right) {\r\n                setLeft(clickX);\r\n            } else {\r\n                setLeft(clickX - rootW);\r\n            }\r\n            if (bottom) {\r\n                setTop(clickY);\r\n            } else {\r\n                setTop(clickY - rootH);\r\n            }\r\n            setDisplay('block');\r\n        });\r\n    }, []);\r\n    useEffect(() => {\r\n        // drawChords();\r\n        let temp = keyState.map((item) => {\r\n            return item.map((itt) => {\r\n                itt.checked = false;\r\n                if (downKeys.includes(itt.value)) {\r\n                    itt.checked = true;\r\n                }\r\n                return itt;\r\n            });\r\n        });\r\n        setKey(temp);\r\n        realTimeChords.current = [...downKeys];\r\n    }, [downKeys]);\r\n\r\n    return (\r\n        <div\r\n            className={styles.container}\r\n            onKeyDown={(e) => {\r\n                if (hasKey(e.key)) return;\r\n                handleKeyDown(e.key);\r\n                playKey(e.key);\r\n            }}\r\n            onKeyUp={(e) => {\r\n                handleKeyUp(e.key);\r\n            }}\r\n            onMouseDown={(e) => {\r\n                // 更新鼠标状态为按下\r\n                setMouseDown(true);\r\n\r\n                // 把当前按下的按键加入到数组中\r\n                // 通过e.target可以获取到当前鼠标在哪个键上\r\n                // ts不让获取target上的id，但其实上边有id，所以需要进行一下类型转换，先\r\n                // 转换为unknown 在转化为{id: string}，就可以拿到id了\r\n\r\n                const curId = ((e.target as unknown) as { id: string }).id;\r\n\r\n                // 如果当前元素没有id，就啥也不干\r\n                if (!curId) return;\r\n                // 找到test数组中指定id的value，当然首先要用flat方法把数组打平，让它只有一个层级\r\n                // 把downKeys数组设置为只有当前鼠标按下的\r\n                let key = [test.flat(3).find((item) => item.id === curId)?.value ?? ''];\r\n                drawChords();\r\n                playKey(key[0]);\r\n                setDownKeys(key);\r\n            }}\r\n            onMouseUp={(e) => {\r\n                //更新鼠标状态为抬起\r\n                setMouseDown(false);\r\n\r\n                setDownKeys([]);\r\n            }}\r\n            onMouseMove={(e) => {\r\n                //如果鼠标没有按下的话,什么都不做\r\n                if (!mouseDown) return;\r\n\r\n                const curId = ((e.target as unknown) as { id: string }).id;\r\n\r\n                if (!curId) return;\r\n                let key = [test.flat(3).find((item) => item.id === curId)?.value ?? ''];\r\n                if (hasKey(key[0])) return;\r\n                playKey(key[0]);\r\n                setDownKeys(key);\r\n            }}\r\n        >\r\n            <Alert\r\n                className=\"alert\"\r\n                ownStyle={{ position: 'absolute', display: display, left: altLeft, top: altTop }}\r\n                handleClick={(e: string) => {\r\n                    setDisplay(e);\r\n                }}\r\n                submit={(e: { chord: string; value: string }) => {\r\n                    console.log(e);\r\n                    changeKey(e);\r\n                }}\r\n                message={{ chords: ['C1', 'A1'] }}\r\n            ></Alert>\r\n            <div\r\n                className={styles.footer}\r\n                onClick={() => {\r\n                    setDisplay('none');\r\n                }}\r\n            >\r\n                <Piano>{Lists}</Piano>\r\n            </div>\r\n\r\n            <canvas\r\n                ref={canvasRef}\r\n                style={{ backgroundColor: 'white', width: '100%', height: '100%' }}\r\n                onClick={() => {\r\n                    setDisplay('none');\r\n                }}\r\n            ></canvas>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","D:\\finger-jumping\\src\\piano_chords.js",[],["54","55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"64","line":12,"column":11,"nodeType":"62","messageId":"63","endLine":12,"endColumn":24},{"ruleId":"60","severity":1,"message":"65","line":17,"column":24,"nodeType":"62","messageId":"63","endLine":17,"endColumn":32},{"ruleId":"60","severity":1,"message":"66","line":14,"column":34,"nodeType":"62","messageId":"63","endLine":14,"endColumn":42},{"ruleId":"60","severity":1,"message":"67","line":15,"column":23,"nodeType":"62","messageId":"63","endLine":15,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":19,"column":48,"nodeType":"70","messageId":"71","endLine":19,"endColumn":50},{"ruleId":"68","severity":1,"message":"69","line":29,"column":51,"nodeType":"70","messageId":"71","endLine":29,"endColumn":53},{"ruleId":"68","severity":1,"message":"69","line":39,"column":51,"nodeType":"70","messageId":"71","endLine":39,"endColumn":53},{"ruleId":"60","severity":1,"message":"61","line":1,"column":40,"nodeType":"62","messageId":"63","endLine":1,"endColumn":48},{"ruleId":"60","severity":1,"message":"66","line":15,"column":24,"nodeType":"62","messageId":"63","endLine":15,"endColumn":32},{"ruleId":"60","severity":1,"message":"72","line":6,"column":10,"nodeType":"62","messageId":"63","endLine":6,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":231,"column":8,"nodeType":"75","endLine":231,"endColumn":18,"suggestions":"76"},{"ruleId":"56","replacedBy":"77"},{"ruleId":"58","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'IPianoContext' is defined but never used.","'onSelect' is assigned a value but never used.","'children' is assigned a value but never used.","'setKey' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'chords' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'keyState'. Either include it or remove the dependency array.","ArrayExpression",["81"],["79"],["80"],"no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [downKeys, keyState]",{"range":"84","text":"85"},[9143,9153],"[downKeys, keyState]"]